/*
 * This file is generated by jOOQ.
 */
package pl.kuba565.resttask.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.kuba565.resttask.jooq.Indexes;
import pl.kuba565.resttask.jooq.Keys;
import pl.kuba565.resttask.jooq.Public;
import pl.kuba565.resttask.jooq.tables.records.WorkerRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Worker extends TableImpl<WorkerRecord> {

    private static final long serialVersionUID = 1636247456;

    /**
     * The reference instance of <code>PUBLIC.WORKER</code>
     */
    public static final Worker WORKER = new Worker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkerRecord> getRecordType() {
        return WorkerRecord.class;
    }

    /**
     * The column <code>PUBLIC.WORKER.ID</code>.
     */
    public final TableField<WorkerRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.WORKER.CAR_ID</code>.
     */
    public final TableField<WorkerRecord, Long> CAR_ID = createField(DSL.name("CAR_ID"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.WORKER.PESEL</code>.
     */
    public final TableField<WorkerRecord, String> PESEL = createField(DSL.name("PESEL"), org.jooq.impl.SQLDataType.CHAR(11), this, "");

    /**
     * The column <code>PUBLIC.WORKER.NAME</code>.
     */
    public final TableField<WorkerRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>PUBLIC.WORKER.SURNAME</code>.
     */
    public final TableField<WorkerRecord, String> SURNAME = createField(DSL.name("SURNAME"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>PUBLIC.WORKER</code> table reference
     */
    public Worker() {
        this(DSL.name("WORKER"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.WORKER</code> table reference
     */
    public Worker(String alias) {
        this(DSL.name(alias), WORKER);
    }

    /**
     * Create an aliased <code>PUBLIC.WORKER</code> table reference
     */
    public Worker(Name alias) {
        this(alias, WORKER);
    }

    private Worker(Name alias, Table<WorkerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Worker(Name alias, Table<WorkerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Worker(Table<O> child, ForeignKey<O, WorkerRecord> key) {
        super(child, key, WORKER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_CAR_INDEX_5, Indexes.PRIMARY_KEY_5);
    }

    @Override
    public Identity<WorkerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_WORKER;
    }

    @Override
    public UniqueKey<WorkerRecord> getPrimaryKey() {
        return Keys.PK_WORKER;
    }

    @Override
    public List<UniqueKey<WorkerRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkerRecord>>asList(Keys.PK_WORKER);
    }

    @Override
    public List<ForeignKey<WorkerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WorkerRecord, ?>>asList(Keys.FK_CAR);
    }

    public Car car() {
        return new Car(this, Keys.FK_CAR);
    }

    @Override
    public Worker as(String alias) {
        return new Worker(DSL.name(alias), this);
    }

    @Override
    public Worker as(Name alias) {
        return new Worker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Worker rename(String name) {
        return new Worker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Worker rename(Name name) {
        return new Worker(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Long, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
